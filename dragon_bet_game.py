from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, ChatMemberHandler, MessageHandler, filters
import random
import asyncio
import time
import requests
import re
import json

# –®–∞–Ω—Å—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞
dragons = {
    'red': {'chance': 50, 'multiplier': 2, 'emoji': 'üêâ –ö—Ä–∞—Å–Ω—ã–π'},
    'green': {'chance': 30, 'multiplier': 3, 'emoji': 'üê≤ –ó–µ–ª—ë–Ω—ã–π'},
    'black': {'chance': 10, 'multiplier': 5, 'emoji': 'üêç –ß—ë—Ä–Ω—ã–π'}
}

allowed_chat_id = -1002443174653  # ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã SQUID TEST
allowed_topic_title = "Dragon"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞, –≥–¥–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏–≥—Ä–∞
allowed_topic_id = 315  # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Message Thread ID –¥–ª—è —Ç–æ–ø–∏–∫–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
player_bets = {}
timer_messages = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}  # –§–æ—Ä–º–∞—Ç: {user_id: {'balance': 0, 'wallet_address': None}}

SOL_TOKEN_CONTRACT = "9t2LggMNdyhCGmtKH617WzJjLagLEaj7MNzvvucwpump"  # –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –º–æ–Ω–µ—Ç—ã SOL
bank_wallet_address = "3ypZUE9CyaeDHFEBbACEiNaj3CZws2dpY28PGkYfueii"  # –ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
solscan_api_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkQXQiOjE3MzcwMjIxNTc2ODgsImVtYWlsIjoiaXZhbmZyb2xvdnZANjYyNC5ydSIsImFjdGlvbiI6InRva2VuLWFwaSIsImFwaVZlcnNpb24iOiJ2MiIsImlhdCI6MTczNzAyMjE1N30.faQFC9ksCH0QW14gOTqvgxzkTOriQB8hExQmyMqu7aI"  # API –∫–ª—é—á Solscan

DATA_FILE = 'user_data.json'

def load_user_data():
    global user_data
    try:
        with open(DATA_FILE, 'r') as file:
            user_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}


def save_user_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(user_data, file, indent=4)  # –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", user_data)  # –ü–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# ==========================
# Game-related handlers
# ==========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_chat(update):
        await update.message.reply_text("–≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ Dragon.")
        return
    welcome_message = """
        üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É *–°—Ç–∞–≤–∫–∞ –Ω–∞ –î—Ä–∞–∫–æ–Ω–∞*!

        –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä—ë—Ö –¥—Ä–∞–∫–æ–Ω–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç!
        üêâ –ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω: —à–∞–Ω—Å 50%, x2 —Å—Ç–∞–≤–∫–∏
        üê≤ –ó–µ–ª—ë–Ω—ã–π –¥—Ä–∞–∫–æ–Ω: —à–∞–Ω—Å 30%, x3 —Å—Ç–∞–≤–∫–∏
        üêç –ß—ë—Ä–Ω—ã–π –¥—Ä–∞–∫–æ–Ω: —à–∞–Ω—Å 10%, x5 —Å—Ç–∞–≤–∫–∏
    """
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start_game')],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data='balance'), InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data='deposit_info')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not is_allowed_chat(update):
        await query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ Dragon.", show_alert=True)
        return
    keyboard = [
        [InlineKeyboardButton(f"{dragons['red']['emoji']} (—à–∞–Ω—Å {dragons['red']['chance']}%)", callback_data='bet_red')],
        [InlineKeyboardButton(f"{dragons['green']['emoji']} (—à–∞–Ω—Å {dragons['green']['chance']}%)", callback_data='bet_green')],
        [InlineKeyboardButton(f"{dragons['black']['emoji']} (—à–∞–Ω—Å {dragons['black']['chance']}%)", callback_data='bet_black')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–∫–æ–Ω–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏:", reply_markup=reply_markup)

async def place_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not is_allowed_chat(update):
        await query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ Dragon.", show_alert=True)
        return
    user_id = query.from_user.id
    chat_id = update.effective_chat.id
    dragon_color = query.data.split('_')[1]

    if user_id in player_bets:
        await query.answer("‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É!")
        return

    bet_amount = 10
    if user_data.get(user_id, {}).get('balance', 0) < bet_amount:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return

    user_data[user_id]['balance'] -= bet_amount
    save_user_data()
    player_bets[user_id] = {'dragon': dragon_color, 'bet': bet_amount}
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {dragons[dragon_color]['emoji']} –¥—Ä–∞–∫–æ–Ω–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π {bet_amount} –º–æ–Ω–µ—Ç.\nüí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞!")

    start_time = time.time()
    context.job_queue.run_once(finish_game, 30, data={'chat_id': chat_id, 'start_time': start_time})
    context.job_queue.run_repeating(show_timer, 5, data={'chat_id': chat_id, 'duration': 30, 'start_time': start_time})
/////
async def animate_result(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    result_dragon = job_data['result_dragon']
    result_message = job_data['result_message']

    for i in range(3):
        await context.bot.send_message(
            chat_id=chat_id,
            message_thread_id=allowed_topic_id,
            text=f"üêá –ì–æ–Ω–∫–∞ –¥—Ä–∞–∫–æ–Ω–æ–≤: {' '.join(['üí®'] * (i + 1))}"
        )
        await asyncio.sleep(1)
    await context.bot.send_message(
        chat_id=chat_id,
        message_thread_id=allowed_topic_id,
        text=f"üì¢ –ü–æ–±–µ–¥–∏–ª {dragons[result_dragon]['emoji']} –¥—Ä–∞–∫–æ–Ω!"
    )
    await context.bot.send_message(
        chat_id=chat_id,
        message_thread_id=allowed_topic_id,
        text=result_message,
        parse_mode='HTML'
    )
    await start_new_game(context, chat_id)

async def start_new_game(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    keyboard = [
        [InlineKeyboardButton(f"{dragons['red']['emoji']} (—à–∞–Ω—Å {dragons['red']['chance']}%)", callback_data='bet_red')],
        [InlineKeyboardButton(f"{dragons['green']['emoji']} (—à–∞–Ω—Å {dragons['green']['chance']}%)", callback_data='bet_green')],
        [InlineKeyboardButton(f"{dragons['black']['emoji']} (—à–∞–Ω—Å {dragons['black']['chance']}%)", callback_data='bet_black')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, message_thread_id=allowed_topic_id, text="–ù–∞—á–Ω–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–∫–æ–Ω–∞:", reply_markup=reply_markup)

async def finish_game(context: ContextTypes.DEFAULT_TYPE):
    result_dragon = random.choices(list(dragons.keys()), [50, 30, 10])[0]
    result_message = f"üì¢ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª {dragons[result_dragon]['emoji']} –¥—Ä–∞–∫–æ–Ω!\n"
    total_payouts = []

    for user_id, bet in player_bets.items():
        if bet['dragon'] == result_dragon:
            payout = bet['bet'] * dragons[result_dragon]['multiplier']
            user_data[user_id]['balance'] += payout
            total_payouts.append(f"<a href='tg://user?id={user_id}'>–ò–≥—Ä–æ–∫</a> –≤—ã–∏–≥—Ä–∞–ª {payout} –º–æ–Ω–µ—Ç!")
        else:
            total_payouts.append(f"<a href='tg://user?id={user_id}'>–ò–≥—Ä–æ–∫</a> –ø—Ä–æ–∏–≥—Ä–∞–ª —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã.")
    save_user_data()
    result_message += "\n" + "\n".join(total_payouts)
    player_bets.clear()

    context.job_queue.run_once(
        animate_result,
        0,
        data={'chat_id': context.job.data['chat_id'], 'result_dragon': result_dragon, 'result_message': result_message}
    )

# ==========================
# Balance and wallet handlers
# ==========================
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    balance = user_data.get(user_id, {}).get('balance', 0)
    wallet = user_data.get(user_id, {}).get('wallet_address', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start_game'), InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data='set_wallet')],
        [InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.answer()
    await query.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet}", reply_markup=reply_markup)

async def set_wallet_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='balance'), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /set_wallet <–∞–¥—Ä–µ—Å>", reply_markup=reply_markup)

async def set_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if len(context.args) != 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞.")
        return
    wallet_address = context.args[0]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.setdefault(user_id, {'balance': 0})['wallet_address'] = wallet_address
    save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

    keyboard = [[InlineKeyboardButton("–ö–æ—à–µ–ª–µ–∫", callback_data='balance'), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ {wallet_address} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply_markup)

async def show_deposit_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='balance'), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.answer()
    await query.edit_message_text(
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ Squid Bingo (SQUID) –º–æ–Ω–µ—Ç—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –∞–¥—Ä–µ—Å:\n{bank_wallet_address}\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_deposit –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.", reply_markup=reply_markup
    )
/////
# ==========================
# Deposit checking function
# ==========================
async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    wallet_address = user_data.get(user_id, {}).get('wallet_address')

    if not wallet_address:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_wallet <–∞–¥—Ä–µ—Å>.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É
    transactions = check_transaction_history(wallet_address)
    if not transactions:
        await update.message.reply_text("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    deposit_found = False
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    for tx in transactions:
        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å–ø–µ—à–Ω–∞
        if tx.get('source') == wallet_address and tx.get('status') == 'success':
            amount = tx.get('amount', 0)
            user_data[user_id]['balance'] += amount  # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            deposit_found = True
            save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            break

    if deposit_found:
        await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} –º–æ–Ω–µ—Ç.")
    else:
        await update.message.reply_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–æ–Ω–µ—Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å.")

# ==========================
# Utility and general handlers
# ==========================
def check_transaction_history(address: str):
    url = f"https://api.solscan.io/account/splTransfers?account={address}&contract={SOL_TOKEN_CONTRACT}"
    headers = {"accept": "application/json", "Authorization": f"Bearer {solscan_api_key}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get('data', [])
    return []

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title
    message_thread_id = update.effective_message.message_thread_id if update.effective_message else None
    await update.message.reply_text(
        f"Chat ID: {chat_id}\nChat Type: {chat_type}\nChat Title: {chat_title}\nMessage Thread ID: {message_thread_id}"
    )

async def set_topic_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global allowed_topic_id
    allowed_topic_id = update.effective_message.message_thread_id if update.effective_message else None
    await update.message.reply_text(f"Message Thread ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {allowed_topic_id}")

def is_allowed_chat(update: Update) -> bool:
    chat = update.effective_chat
    message_thread_id = update.effective_message.message_thread_id if update.effective_message else None
    return chat.id == allowed_chat_id and message_thread_id == allowed_topic_id

async def greet_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.chat_member.new_chat_members:
        if not member.is_bot:
            welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}! –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å!"
            keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start_game')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=welcome_text,
                reply_markup=reply_markup
            )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    wallet_address = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    if re.fullmatch(r'[1-9A-HJ-NP-Za-km-z]{32,44}', wallet_address):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.setdefault(user_id, {'balance': 0})['wallet_address'] = wallet_address
        save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        await update.message.reply_text(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ {wallet_address} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞.")

if __name__ == '__main__':
    load_user_data()
    app = ApplicationBuilder().token('7881851539:AAH4km0NsrKacgQsVpAvJwiFWt6m2hiXJ1U').build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('get_chat_id', get_chat_id))
    app.add_handler(CommandHandler('set_topic_id', set_topic_id))
    app.add_handler(CommandHandler('balance', show_balance))
    app.add_handler(CommandHandler('set_wallet', set_wallet))
    app.add_handler(CallbackQueryHandler(start_game, pattern='^start_game$'))
    app.add_handler(CallbackQueryHandler(show_balance, pattern='^balance$'))
    app.add_handler(CallbackQueryHandler(set_wallet_prompt, pattern='^set_wallet$'))
    app.add_handler(CallbackQueryHandler(show_deposit_info, pattern='^deposit_info$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(place_bet, pattern='^bet_(red|green|black)$'))
    app.add_handler(ChatMemberHandler(greet_new_user, ChatMemberHandler.CHAT_MEMBER))

    app.run_polling()
